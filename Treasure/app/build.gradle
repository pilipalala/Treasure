apply plugin: 'com.android.application'

//apply greendao插件
apply plugin: 'org.greenrobot.greendao'

//apply realm插件
apply plugin: 'realm-android'


/**
 * 第一种方法 keystore.properties 可以直接放在 app module下
 * */

def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(file("keystore.properties")))

/**
 * 第二种方法
 * */
/*
def keystorePropertiesFile = rootProject.file("app/keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
*/
def cfg = rootProject.ext.android
def libraries = rootProject.ext.dependencies

def releaseTime() {
    return new Date().format("MM.dd", TimeZone.getTimeZone("UTC"))
}

def getAppName() {
    return "Treasure"
}

def getDebugAppName() {
    return "TreasureDebug"
}

android {
    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion
    /**
     * 一、默认产品偏好配置
     */
    defaultConfig {
        applicationId cfg.appId
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
        packagingOptions {
            pickFirst 'META-INF/*'
        }
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }
/**
 * 给生成的apk文件重命名，
 */
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${getAppName()}${releaseTime()}.apk"
        }
    }
//增加java堆内存
    dexOptions {
        javaMaxHeapSize "4g"
    }
/**
 * 二、自定义签名配置
 */
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
        debug {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
/**
 * 三、构建类型，分为release和debug两种
 */
    buildTypes {
        release {
            /*定义是否混淆代码*/
            minifyEnabled true
            /*压缩资源文件*/
            shrinkResources true
            /*proguardFiles定义混淆代码的默认混淆规则*/
            /*proguard-android.txt表示系统自带的混淆规则*/
            /*proguard-rules.pro位于当前module根目录下*/
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名配置
            signingConfig signingConfigs.release
            /**
             * 动态添加 string.xml 字段；
             * 注意，这里是添加，在 string.xml 不能有这个字段，会重名！！！
             */
            resValue "string", "app_name", getAppName()
        }
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            //在release包名后面添加了一个后缀形成了debug的包名
//            applicationIdSuffix '.dev'
            //在AndroidManifest.xml中配置的app名称，在这里实现了动态配置
            resValue "string", "app_name", getAppName()
            //该数组的值都可以在AndroidManifest.xml文件中配置。
//            manifestPlaceholders = [
//                    //这里也是在 AndroidManifest.xml中配置的app图标，同样在这里写了了不同的资源文件，从而实现了动态配置
//                    icon: "@mipmap/ic_launcher_round",
//            ]
            //通过配置buildConfig来动态配置请求的host服务器和图片服务器
//            buildConfigField "String", "HostUrl", "\"${url["release"]}\""
//            buildConfigField "String", "ImageUrl", "\"${imgUrl["release"]}\""
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'GoogleAppIndexingWarning'
    }
    sourceSets { main { aidl.srcDirs = ['src/main/aidl', 'src/main/aidl/'] } }


}
repositories {
    flatDir {
        dirs 'lib' //就是你放aar的目录地址
    }
}
greendao {
    //指定数据库schema版本号，迁移等操作会用到
    schemaVersion 1

    //DaoSession、DaoMaster以及所有实体类的dao生成的目录,默认为你的entity所在的包名(build/generated/source/greendao)
    //daoPackage 包名
    //生成的Dao，DaoMaster和DaoSession的包名称
//    daoPackage 'com.wyj.treasure'

    //这就是我们上面说到的自定义生成数据库文件的目录了，可以将生成的文件放到我们的java目录中，而不是build中，这样就不用额外的设置资源目录了
    //生成源应存储在的位置。 默认为构建目录（ build / generated / source / greendao）中生成的源文件夹。
//    targetGenDir 'src/main/java'
//
//    //设置为true，自动生成单元测试。
//    generateTests： true
//
//    //在哪里产生的单元测试应该被存储在基本目录。默认为 SRC / androidTest / java的。
//    targetGenDirTests：
}
/**
 * 引入依赖包的秘密
 */
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
    implementation libraries.multidex
    implementation libraries.supportV7
    implementation libraries.suppoutDesign
    implementation libraries.cardview
    implementation libraries.vector
    implementation libraries.supportV4
    implementation libraries.constraint
    implementation libraries.palette

    //Crash库 https://github.com/Ereza/CustomActivityOnCrash

    //implementation 'cat.ereza:customactivityoncrash:2.1.0'

    //butterknife https://github.com/JakeWharton/butterknife
    implementation 'com.jakewharton:butterknife:8.7.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'

    //RecyclerAdapter框架 https://github.com/CymChad/BaseRecyclerViewAdapterHelper
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.22'

    //腾讯bugly https://github.com/BuglyDevTeam/Bugly-Android-Demo
    implementation 'com.tencent.bugly:crashreport:2.6.6.1'
    implementation 'com.tencent.bugly:nativecrashreport:3.3.1'

    //autofittextview  https://github.com/grantland/android-autofittextview
    implementation 'me.grantland:autofittextview:0.2.+'

    //glide  https://github.com/bumptech/glide
    implementation 'com.github.bumptech.glide:glide:3.7.0'

    //glide-transformations https://github.com/wasabeef/glide-transformations
    implementation 'jp.wasabeef:glide-transformations:2.0.1'

    //rxjava https://github.com/ReactiveX/RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.0.1'

    //RxAndroid https://github.com/ReactiveX/RxAndroid
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    //RxBinding https://github.com/JakeWharton/RxBinding
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.0.0'

    //retrofit https://github.com/square/retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'

    //okhttp https://github.com/square/okhttp
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'

    //TinyPinyin https://github.com/promeG/TinyPinyin
    implementation 'com.github.promeg:tinypinyin:1.0.0'

    //dagger  https://github.com/square/dagger
    compileOnly 'org.glassfish:javax.annotation:10.0-b28'
    implementation 'com.google.dagger:dagger:2.5'
    implementation 'com.google.dagger:dagger-compiler:2.5'

    //Android加载动画Android-SpinKit  https://github.com/ybq/Android-SpinKit
    implementation 'com.github.ybq:Android-SpinKit:1.1.0'

    //hawk https://github.com/orhanobut/hawk

    //implementation 'com.orhanobut:hawk:2.0.1'

    //greenDAO https://github.com/greenrobot/greenDAO
    implementation 'org.greenrobot:greendao:3.2.2'

    //Facebook Stetho 调试
    implementation('com.facebook.stetho:stetho:1.5.0') {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    implementation('com.facebook.stetho:stetho-okhttp3:1.5.0') {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }

    //选择控件器PickerView
    implementation 'com.contrarywind:Android-PickerView:4.1.6'

//    def nav_version = "1.0.0-alpha06"
//    implementation "android.arch.navigation:navigation-fragment:$nav_version"
//    implementation "android.arch.navigation:navigation-ui:$nav_version"
//    androidTestImplementation "android.arch.navigation:navigation-testing:$nav_version"
}
